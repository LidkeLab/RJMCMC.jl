var documenterSearchIndex = {"docs":
[{"location":"api/#Library","page":"API","title":"Library","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Documentation for ReversibleJumpMCMC.jl","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [ReversibleJumpMCMC]","category":"page"},{"location":"api/#ReversibleJumpMCMC.RJChain","page":"API","title":"ReversibleJumpMCMC.RJChain","text":"RJChain\n\nA structure that represents a Reversible Jump Markov Chain Monte Carlo (RJMCMC) chain.\n\nFields\n\nn::Int: The number of jumps in the chain. Each jump represents a transition from one state to another.\nstates::Vector{Any}: A vector of states in the chain. Each state represents a point in the parameter space.\njumptypes::Vector{Int}: A vector of the attempted jump types from the current state. Each jump type corresponds to a different type of transition that can be proposed.\nα::Vector{Float64}: A vector of acceptance probabilities for each proposed state. The acceptance probability determines whether a proposed state is accepted or rejected.\naccept::Vector{Bool}: A vector of results from the acceptance calculation. Each element is a boolean indicating whether the corresponding proposed state was accepted (true) or rejected (false).\nproposedstates::Vector{Any}: A vector of proposed states. Each proposed state is a potential next state in the chain.\n\nConstructor\n\nThe constructor for RJChain takes an integer n and initializes a chain with n jumps. All vectors are initialized with n elements. The states, α, and proposedstates vectors are initialized with undefined values, the jumptypes vector is initialized with zeros, and the accept vector is initialized with false.\n\n\n\n\n\n","category":"type"},{"location":"api/#ReversibleJumpMCMC.RJChain-Tuple{Int64}","page":"API","title":"ReversibleJumpMCMC.RJChain","text":"RJChain(n::Int)\n\nConstructs a new RJChain with n jumps.\n\nArguments\n\nn::Int: The number of jumps in the chain.\n\nReturns\n\nA new RJChain with n jumps. The states, α, and proposedstates vectors are initialized with undefined values, the jumptypes vector is initialized with zeros, and the accept vector is initialized with false.\n\n\n\n\n\n","category":"method"},{"location":"api/#ReversibleJumpMCMC.RJMCMCStruct","page":"API","title":"ReversibleJumpMCMC.RJMCMCStruct","text":"RJMCMCStruct\n\nA structure that contains information required for creating and running a Reversible Jump Markov Chain Monte Carlo (RJMCMC) chain.\n\nFields\n\nburnin::Int: The number of steps for the burn-in phase of the chain. During this phase, the chain is allowed to converge towards a stationary distribution.\niterations::Int: The number of steps for the actual chain that will be returned. This is the part of the chain that is used for inference.\nnjumptypes::Int: The number of different types of jumps that can be proposed.\njumpprobability::Distributions.Categorical: A categorical distribution that represents the probability mass function for selecting each jump type.\nproposalfuns::Vector{Function}: An array of proposal functions. Each function should take the current state and a Metropolis-Hastings sampler as input and return a proposed state and any additional arguments needed for the acceptance function.\nacceptfuns::Vector{Function}: An array of acceptance functions. Each function should take the current state, proposed state, Metropolis-Hastings sampler, and any additional arguments from the proposal function as input and return the acceptance probability.\n\nFunction Signatures\n\nThe proposal and acceptance functions must have the following signatures:\n\n(proposedstate, vararg) = proposalfuns[jt](mhs, currentstate)\nα = acceptfuns[jt](mhs, currentstate, proposedstate, vararg)\n\nwhere jt is the index of the jump type, mhs is a structure passed to the functions, currentstate is the current state of the chain, proposedstate is the proposed state, vararg is any additional arguments needed to be passed between related propose and accept functions, and α is the acceptance probability.\n\n\n\n\n\n","category":"type"},{"location":"api/#ReversibleJumpMCMC.buildchain-Tuple{ReversibleJumpMCMC.RJMCMCStruct, Any, Any}","page":"API","title":"ReversibleJumpMCMC.buildchain","text":"buildchain(rjs::RJMCMCStruct, mhs, initialstate)\n\nBuild a new RJMCMC chain using an initial state and a Metropolis-Hastings sampler.\n\nArguments\n\nrjs::RJMCMCStruct: An RJMCMCStruct object that contains the number of iterations for the new chain.\nmhs: A user-defined Metropolis-Hastings parameter structure passed propose/accept functions.\ninitialstate: The initial state to start the new chain.\n\nReturns\n\nchain::RJChain: A new RJChain object that has been initialized with the initial state and run for the specified number of iterations.\n\n\n\n\n\n","category":"method"},{"location":"api/#ReversibleJumpMCMC.initchain-Tuple{ReversibleJumpMCMC.RJMCMCStruct, Any}","page":"API","title":"ReversibleJumpMCMC.initchain","text":"initchain(rjs::RJMCMCStruct, initialstate)\n\nInitialize a new RJMCMC chain using an initial state and configures a burn-in.\n\nArguments\n\nrjs::RJMCMCStruct: An RJMCMCStruct object that contains the number of iterations for the new chain.\ninitialstate: The initial state to start the new chain.\n\nReturns\n\nnewchain::RJChain: A new RJChain object that has been initialized with the initial state and configured for burn-in.\n\n\n\n\n\n","category":"method"},{"location":"api/#ReversibleJumpMCMC.initchain-Tuple{ReversibleJumpMCMC.RJMCMCStruct, ReversibleJumpMCMC.RJChain}","page":"API","title":"ReversibleJumpMCMC.initchain","text":"initchain(rjs::RJMCMCStruct, burninchain::RJChain)\n\nInitialize a new RJMCMC chain using the last state of a burn-in chain.\n\nArguments\n\nrjs::RJMCMCStruct: An RJMCMCStruct object that contains the number of iterations for the new chain.\nburninchain::RJChain: An RJChain object that represents the burn-in chain. The last state of this chain is used to initialize the new chain.\n\nReturns\n\nnewchain::RJChain: A new RJChain object that has been initialized with the last state of the burn-in chain.\n\n\n\n\n\n","category":"method"},{"location":"api/#ReversibleJumpMCMC.runchain!-Tuple{ReversibleJumpMCMC.RJMCMCStruct, ReversibleJumpMCMC.RJChain, Any, Any}","page":"API","title":"ReversibleJumpMCMC.runchain!","text":"runchain!(rjs::RJMCMCStruct, rjc::RJChain, iterations, mhs)\n\nRun the RJMCMC chain for a specified number of iterations using a Metropolis-Hastings sampler.\n\nArguments\n\nrjs::RJMCMCStruct: An RJMCMCStruct object that contains the jump probabilities and proposal functions.\nrjc::RJChain: The RJChain object to run.\niterations: The number of iterations to run the chain.\nmhs: A user-defined Metropolis-Hastings parameter structure passed propose/accept functions.\n\nModifies\n\nrjc::RJChain: The RJChain object is updated with the new states, jump types, proposed states, acceptance probabilities, and acceptance states.\n\n\n\n\n\n","category":"method"},{"location":"#Documentation-for-ReversibleJumpMCMC.jl","page":"Home","title":"Documentation for ReversibleJumpMCMC.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ReversibleJumpMCMC.jl provides a lightweight framework for Reversible Jump Markov Chain Monte Carlo.  ","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The framework is based around the following code block. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"# select a jumptype\njt=rand(rjs.jumpprobability)\n\n# propose a new state\nmtest,vararg=rjs.proposalfuns[jt](mhs,rjc.states[nn])     \n\n# calculate acceptance probability\nα=rjs.acceptfuns[jt](mhs,rjc.states[nn],mtest,vararg)\n\n# accept or reject\nrjc.α[nn+1]=α;\nif α>rand()\n    rjc.accept[nn+1]=1;\n    rjc.states[nn+1]=mtest;\nelse\n    rjc.accept[nn+1]=0;\n    rjc.states[nn+1]=rjc.states[nn];\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"A jumptype jt::Int64 is selected from a Categorial distribution and used to select state proposal and acceptance functions.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"rjs::RJMCMCStruct holds a vector of functions for proposal generators and acceptance calculators.    ","category":"page"},{"location":"","page":"Home","title":"Home","text":"States of the chain are accumlated in the vector rjc.states where rjc::RJChain is a struct holding the results of the RJMCMC run.  mhs is a user defined type, typically immutable, sent to all proposal and generator functions. vararg can be customized for specific proposal/acceptance functions.","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"#D-Gaussian-PDF","page":"Home","title":"1D Gaussian PDF","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Explore a 1D Gaussian PDF using a basic MCMC chain","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ReversibleJumpMCMC\nusing Distributions\nusing CairoMakie    \n\n# setup a MH structure that gets passed around inside RJMMCMC\nstruct MHStruct\n    σ::Float64 # metropolis hasting jump size\nend\nmhs = MHStruct(1)\n\n# setup a state type\nmutable struct state1D \n    x::Float64\nend\n\n# setup proposal and acceptance functions\nfunction mypropose(mhs::MHStruct, s::state1D)\n    teststate = state1D(s.x + mhs.σ * randn())\n    return teststate, 0\nend\n\nfunction myaccept(mhs::MHStruct, s::state1D, teststate::state1D, vararg)\n    σ = 5.0\n    d = Normal(0.0, σ)\n    α = pdf(d, teststate.x) / pdf(d, s.x)\n    return α\nend\n\n# setup the RJMCMCStruct\nburnin = 100\niterations = 10000\nnjumptypes = 1 \njumpprobability = Categorical([1.0]) \nproposalfuns = [mypropose] \nacceptfuns = [myaccept] \nrjs = ReversibleJumpMCMC.RJMCMCStruct(burnin, iterations, njumptypes, jumpprobability, proposalfuns, acceptfuns)\n\n# initial state\nstate0 = state1D(0.0)\n\n# run chain\nrjc = ReversibleJumpMCMC.buildchain(rjs, mhs, state0)\n\n\n# Extract parameters from states\nxchain = zeros(Float32, iterations)\nfor ii = 1:iterations\n    xchain[ii] = rjc.states[ii].x\nend\n\n# Show parameter distribution\n\n# true pdf\nxvec = -20:0.1:20\nσ = 5.0\nd = Normal(0.0, σ)\n\nfig = Figure()\nax = Axis(fig[1, 1], xlabel=\"θ\", ylabel=\"pdf(θ)\")\nhistplot = hist!(ax, xchain, normalization=:pdf)\npdfplot = lines!(ax, xvec, pdf.(d, xvec), color=:red)\nlegend = Legend(fig, [histplot, pdfplot], [\"mcmc dist.\", \"true pdf\"])\nfig[1, 2] = legend\nfig\nsave(\"pdf.png\", fig) # hide\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"}]
}
