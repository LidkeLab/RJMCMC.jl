var documenterSearchIndex = {"docs":
[{"location":"RJMCMCLibrary/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"RJMCMCLibrary/","page":"Library","title":"Library","text":"Documentation for ReversibleJumpMCMC.jl","category":"page"},{"location":"RJMCMCLibrary/","page":"Library","title":"Library","text":"Modules = [ReversibleJumpMCMC]","category":"page"},{"location":"RJMCMCLibrary/#ReversibleJumpMCMC.RJChain","page":"Library","title":"ReversibleJumpMCMC.RJChain","text":"RJChain\n\nContains information about the chain including a vector of accepted states\n\nFields\n\n`n::Int32 : number of jumps in chain \n`states::Vector{Any} : vector of states \n`jumptypes::Vector{Int32} : vector of the attempted jumptype from the current state\n`α::Vector{Float32} : vector of acceptance probabilities from proposed state \n`accept::Vector{Bool} : vector of results from acceptance calculation\n'proposedstates::Vector{Any}' : vector of proposed states\n\n\n\n\n\n","category":"type"},{"location":"RJMCMCLibrary/#ReversibleJumpMCMC.RJMCMCStruct","page":"Library","title":"ReversibleJumpMCMC.RJMCMCStruct","text":"RJMCMCStruct\n\nContains information about creating the chain\n\nFields\n\nburnin::Int32: number of steps for chain burn in.\n`iterations::Int32' : number of steps for the returned chain\n`njumptypes::Int32' : number of different jump types\n`jumpprobability::Vector{Float32}' : probability mass function for jump type selection\n`proposalfuns' :  array of functions for proposal functions\n`acceptfuns' :  array of functions for acceptance functions\n\nproposal and acceptance functions must have the signature\n\n(proposedstate,vararg)=proposalfuns[jt](mhs,currentstate)     \nα=acceptfuns[jt](mhs,currentstate,proposedstate,vararg)\n\nwhere jt is the index of the jumptype, mhs is structure passed to the functions, and vararg is anything needed to be passed between related propose and accept fucntions \n\n\n\n\n\n","category":"type"},{"location":"RJMCMCLibrary/#ReversibleJumpMCMC.buildchain-Tuple{ReversibleJumpMCMC.RJMCMCStruct, Any, Any}","page":"Library","title":"ReversibleJumpMCMC.buildchain","text":"buildchain(rjs::RJMCMCStruct,mhs,intialstate)\n\nGenerate RJMCMC chain and returns a RJChain struct.   \n\n\n\n\n\n","category":"method"},{"location":"#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"ReversibleJumpMCMC.jl provides a lightweight framework for Reversible Jump Markov Chain Monte Carlo.  ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The framework is based around the following code block. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"mtest,vararg=rjs.proposalfuns[jt](mhs,rjc.states[nn])     \nα=rjs.acceptfuns[jt](mhs,rjc.states[nn],mtest,vararg)\nrjc.α[nn+1]=α;\nif α>rand()\n    rjc.accept[nn+1]=1;\n    rjc.states[nn+1]=mtest;\nelse\n    rjc.accept[nn+1]=0;\n    rjc.states[nn+1]=rjc.states[nn];\nend","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"A jumptype jt::Int32 is selected from a probability mass function (not shown) and used to select state proposal and acceptance functions.  ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"rjs::RJMCMCStruct holds a vector of functions for proposal generators and acceptance calculators.    ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"States of the chain are accumlated in the vector rjc.states where rjc::RJChain is a struct holding the results of the RJMCMC run.  mhs is a user defined type, typically immutable, sent to all proposal and generator functions. vararg can be customized for specific proposal/acceptance functions.","category":"page"}]
}
