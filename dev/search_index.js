var documenterSearchIndex = {"docs":
[{"location":"#RJMCMC.jl","page":"RJMCMC.jl","title":"RJMCMC.jl","text":"","category":"section"},{"location":"","page":"RJMCMC.jl","title":"RJMCMC.jl","text":"Documentation for RJMCMC.jl","category":"page"},{"location":"","page":"RJMCMC.jl","title":"RJMCMC.jl","text":"Modules = [RJMCMC]","category":"page"},{"location":"#RJMCMC.RJChain","page":"RJMCMC.jl","title":"RJMCMC.RJChain","text":"RJChain\n\nContains information about the chain including a vector of accepted states\n\nFields\n\n`n::Int32 : number of jumps in chain \n`states::Vector{Any} : vector of states \n`jumptypes::Vector{Int32} : vector of the attempted jumptype from the current state\n`α::Vector{Float32} : vector of acceptance probabilities from proposed state \n`accept::Vector{Bool} : vector of results from acceptance calculation\n\n\n\n\n\n","category":"type"},{"location":"#RJMCMC.RJMCMCStruct","page":"RJMCMC.jl","title":"RJMCMC.RJMCMCStruct","text":"RJMCMCStruct\n\nContains information about creating the chain\n\nFields\n\nburnin::Int32: number of steps for chain burn in.\n`iterations::Int32' : number of steps for the returned chain\n`njumptypes::Int32' : number of different jump types\n`jumpprobability::Vector{Float32}' : probability mass function for jump type selection\n`proposalfuns' :  array of functions for proposal functions\n`acceptfuns' :  array of functions for acceptance functions\n\nproposal and acceptance functions must have the signature\n\n(proposedstate,vararg)=proposalfuns[jt](mhs,currentstate)     \nα=acceptfuns[jt](mhs,currentstate,proposedstate,vararg)\n\nwhere jt is the index of the jumptype, mhs is structure passed to the functions, and vararg is anything needed to be passed between related propose and accept fucntions \n\n\n\n\n\n","category":"type"}]
}
